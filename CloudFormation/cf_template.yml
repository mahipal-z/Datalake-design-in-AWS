Resources:
  SourceS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'datalake-source-s3-mz'

  RawS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'datalake-raw-s3-mz'
      
  ProcessedS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'datalake-processed-s3-mz'
      
  TransformedS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'datalake-transformed-s3-mz'
      
  CopyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: mz-lambda-function
      Handler: lambda_function.lambda_handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3

          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              source_bucket = !Ref SourceS3Bucket
              destination_bucket = !Ref RawS3Bucket
              key = event['Records'][0]['s3']['object']['key']
              
              # Copy the object from source bucket to destination bucket
              s3.copy_object(Bucket=destination_bucket, CopySource={'Bucket': source_bucket, 'Key': key}, Key=key)
              
              return {
                  'statusCode': 200,
                  'body': 'File copied successfully'
              }
      Runtime: python3.9
      Timeout: 60
      MemorySize: 128

  MyLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: my-lambda-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: my-lambda-execution-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - !GetAtt SourceS3Bucket.Arn
                  - !Sub '${SourceS3Bucket.Arn}/*'
                  - !GetAtt RawS3Bucket.Arn
                  - !Sub '${RawS3Bucket.Arn}/*'
                
  MyGlueJobRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: mz-glue-job-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: my-glue-job-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${RawS3Bucket}'
                  - !Sub 'arn:aws:s3:::${RawS3Bucket}/*'
                  - !Sub 'arn:aws:s3:::${ProcessedS3Bucket}'
                  - !Sub 'arn:aws:s3:::${ProcessedS3Bucket}/*'

  MyGlueJob:
    Type: 'AWS::Glue::Job'
    Properties:
      Name: my-glue-job
      Role: !GetAtt MyGlueJobRole.Arn
      Command:
        Name: pythonshell
        ScriptLocation: !Sub '${RawS3Bucket}/combine_csv.py'